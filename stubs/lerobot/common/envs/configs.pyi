import abc
from dataclasses import dataclass, field

import draccus
from _typeshed import Incomplete
from lerobot.common.constants import ACTION as ACTION
from lerobot.common.constants import OBS_ENV as OBS_ENV
from lerobot.common.constants import OBS_IMAGE as OBS_IMAGE
from lerobot.common.constants import OBS_IMAGES as OBS_IMAGES
from lerobot.common.constants import OBS_ROBOT as OBS_ROBOT
from lerobot.configs.types import FeatureType as FeatureType
from lerobot.configs.types import PolicyFeature as PolicyFeature

@dataclass
class EnvConfig(draccus.ChoiceRegistry, abc.ABC, metaclass=abc.ABCMeta):
    task: str | None = ...
    fps: int = ...
    features: dict[str, PolicyFeature] = field(default_factory=dict)
    features_map: dict[str, str] = field(default_factory=dict)
    @property
    def type(self) -> str: ...
    @property
    @abc.abstractmethod
    def gym_kwargs(self) -> dict: ...

@dataclass
class AlohaEnv(EnvConfig):
    task: str = ...
    fps: int = ...
    episode_length: int = ...
    obs_type: str = ...
    render_mode: str = ...
    features: dict[str, PolicyFeature] = field(default_factory=Incomplete)
    features_map: dict[str, str] = field(default_factory=Incomplete)
    def __post_init__(self) -> None: ...
    @property
    def gym_kwargs(self) -> dict: ...

@dataclass
class PushtEnv(EnvConfig):
    task: str = ...
    fps: int = ...
    episode_length: int = ...
    obs_type: str = ...
    render_mode: str = ...
    visualization_width: int = ...
    visualization_height: int = ...
    features: dict[str, PolicyFeature] = field(default_factory=Incomplete)
    features_map: dict[str, str] = field(default_factory=Incomplete)
    def __post_init__(self) -> None: ...
    @property
    def gym_kwargs(self) -> dict: ...

@dataclass
class XarmEnv(EnvConfig):
    task: str = ...
    fps: int = ...
    episode_length: int = ...
    obs_type: str = ...
    render_mode: str = ...
    visualization_width: int = ...
    visualization_height: int = ...
    features: dict[str, PolicyFeature] = field(default_factory=Incomplete)
    features_map: dict[str, str] = field(default_factory=Incomplete)
    def __post_init__(self) -> None: ...
    @property
    def gym_kwargs(self) -> dict: ...
